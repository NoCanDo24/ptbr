# This is the main parameter file for Nav2
# It is broken down by the individual nodes that Nav2 uses.

# ====================
# Global Configuration
# ====================
bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    # This specifies the behavior tree for navigation. You can use the default or a custom one.
    default_nav_to_pose_bt_xml: "navigate_to_pose_w_replanning_and_recovery.xml"

# =====================
# Planner Configuration
# =====================
planner_server:
  ros__parameters:
    use_sim_time: false
    planner_plugins: ["GridBased"]
    # You can change to other planners like "SmacPlanner2D", but "GridBased" is a solid default
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false

# =======================
# Controller Configuration
# =======================
controller_server:
  ros__parameters:
    use_sim_time: false
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.001
    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker"
    controller_plugins: ["FollowPath"]
    
    # Differential Drive Robot Configuration
    FollowPath:
      plugin: "nav2_dwb_controller/DWBLocalPlanner"
      # Velocity and Acceleration Limits (Tune these based on your robot's capabilities!)
      max_vel_x: 0.25 # m/s
      min_vel_x: 0.0
      max_vel_theta: 0.3 # rad/s
      min_vel_theta: -0.3
      acc_lim_x: 0.5
      acc_lim_theta: 0.5
      decel_lim_x: -0.5
      decel_lim_theta: -0.5
      # This is crucial for a differential drive robot, which cannot move sideways
      max_vel_y: 0.0
      min_vel_y: 0.0
      acc_lim_y: 0.0

# ===========================
# Costmap Configuration
# ===========================
# The global costmap is used for long-distance path planning.
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: false
      resolution: 0.05
      track_unknown_space: true
      # You must disable the static map layer since RTAB-Map is providing the map.
      # The costmap will subscribe to RTAB-Map's /map topic directly.
      plugins: ["obstacle_layer", "inflation_layer"]
      
      # The obstacle layer gets data from your camera's point cloud
      obstacle_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        footprint_clearing_enabled: True
        # The topic your OAK-D LITE publishes point clouds on
        observation_sources: point_cloud_sensor
        point_cloud_sensor:
          topic: /camera/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          min_obstacle_height: 0.0
      
      # The inflation layer adds a buffer around obstacles
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        inflation_radius: 0.5 # A radius around obstacles for planning

# The local costmap is used for short-term obstacle avoidance.
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom # The local costmap is relative to the odometry frame
      robot_base_frame: base_link
      use_sim_time: false
      resolution: 0.05
      track_unknown_space: true
      plugins: ["obstacle_layer", "inflation_layer"]
      
      obstacle_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        footprint_clearing_enabled: True
        observation_sources: point_cloud_sensor
        point_cloud_sensor:
          topic: /camera/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          min_obstacle_height: 0.0

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: True
        inflation_radius: 0.5
        
# Set the robot's footprint. This is crucial for collision avoidance.
robot_footprint: "[[0.2, 0.2], [0.2, -0.2], [-0.2, -0.2], [-0.2, 0.2]]"